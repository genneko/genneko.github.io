<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>genneko</title>
    <link>https://genneko.github.io/</link>
    <description>Recent content on genneko</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; Copyright 2017 - 2020 genneko</copyright>
    <lastBuildDate>Wed, 29 Apr 2020 23:53:00 +0900</lastBuildDate><atom:link href="https://genneko.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding VLAN Configuration on FreeBSD</title>
      <link>https://genneko.github.io/playing-with-bsd/networking/freebsd-vlan/</link>
      <pubDate>Wed, 29 Apr 2020 23:53:00 +0900</pubDate>
      
      <guid>https://genneko.github.io/playing-with-bsd/networking/freebsd-vlan/</guid>
      <description>Until recently, I&amp;rsquo;ve never had a chance to use VLANs on FreeBSD hosts, though I sometimes configure them on ethernet switches.
But when I was playing with vnet jails, I suddenly got interested in VLAN configuration on FreeBSD and experimented with it for some time.
I wrote this short article to summarize my current understanding of how to configure VLANs on FreeBSD.
Terminology I think the word VLAN is being used in at least two different senses.</description>
    </item>
    
    <item>
      <title>Building a WireGuard Jail with the FreeBSD&#39;s Standard Tools</title>
      <link>https://genneko.github.io/playing-with-bsd/networking/freebsd-wireguard-jail/</link>
      <pubDate>Sun, 26 Apr 2020 22:46:00 +0900</pubDate>
      
      <guid>https://genneko.github.io/playing-with-bsd/networking/freebsd-wireguard-jail/</guid>
      <description>Recently, I had an opportunity to build a WireGuard jail on a FreeBSD 12.1 host.
As it was really quick and easy to setup and it has been working completely fine for a month, I&amp;rsquo;d like to share my experience with anyone interested in this topic.
 I would like to use WireGuard app on my Android phone to access my home NAS (a vanilla FreeBSD server) via the WireGuard tunnel and reach the Internet through the tunnel too.</description>
    </item>
    
    <item>
      <title>Running X Applications on a Jail created with Bastille</title>
      <link>https://genneko.github.io/playing-with-bsd/application/running-xapps-on-a-jail/</link>
      <pubDate>Sat, 11 Apr 2020 17:06:00 +0900</pubDate>
      
      <guid>https://genneko.github.io/playing-with-bsd/application/running-xapps-on-a-jail/</guid>
      <description>FreeBSD jails are often talked about from a security or system administration perspective.
Although it&amp;rsquo;s a perfectly valid point of view, jails can also be used for other purposes.
In fact, just recently I benefited from a jail in such a situation.
It once again convinced me that jails were really awesome and made me write up this short article.
Assumptions  The host is a graphical desktop workstation running FreeBSD 12.</description>
    </item>
    
    <item>
      <title>How to use Joplin desktop app on FreeBSD</title>
      <link>https://genneko.github.io/playing-with-bsd/application/howto-use-joplin-on-freebsd/</link>
      <pubDate>Wed, 15 Jan 2020 20:26:00 +0900</pubDate>
      
      <guid>https://genneko.github.io/playing-with-bsd/application/howto-use-joplin-on-freebsd/</guid>
      <description>This is a quick note on how I build and use the latest Joplin desktop app on FreeBSD.
For my initial exploration of Joplin on FreeBSD, please refer to the previous post.
Target Version The current target version of this article is Joplin Desktop release v2.2.7 (Aug 2021).
I confirmed that the app could be built using my fork at the tag freebsd-v2.2.7. Building Joplin I take the following steps to build Joplin desktop on my FreeBSD 12.</description>
    </item>
    
    <item>
      <title>Expanding a GELI-encrypted ZFS pool</title>
      <link>https://genneko.github.io/playing-with-bsd/storage/expanding-zfs-on-geli/</link>
      <pubDate>Sun, 17 Nov 2019 19:37:00 +0900</pubDate>
      
      <guid>https://genneko.github.io/playing-with-bsd/storage/expanding-zfs-on-geli/</guid>
      <description>My personal FreeBSD 11.3 server (VPS) was running low on storage space.
By using the VPS provider&amp;rsquo;s disk expansion option, I could easily grow the virtual disk.
But then I wondered how to expand the filesystem on it.
In my case, the filesystem is on a GELI-encrypted ZFS storage pool.
So I had to resize the following entities.
 GPT freebsd-zfs partition GELI device on the GPT partition ZFS pool comprised of the GELI device  After rehearsing on VirtualBox VMs, I took the following steps to get more free space for the server.</description>
    </item>
    
    <item>
      <title>ThinkPad T480 is my new main laptop which runs FreeBSD</title>
      <link>https://genneko.github.io/playing-with-bsd/hardware/freebsd-on-thinkpad-t480/</link>
      <pubDate>Thu, 22 Aug 2019 00:50:00 +0900</pubDate>
      
      <guid>https://genneko.github.io/playing-with-bsd/hardware/freebsd-on-thinkpad-t480/</guid>
      <description>I&amp;rsquo;ve been using FreeBSD as my primary server OS for quite a long time.
But, for unknown reasons, I have never seriously used it on client workstations.
Maybe it&amp;rsquo;s partly because I&amp;rsquo;m a CUI-oriented person who loves doing things on text terminals as much as possible.
Actually, I have been pretty happy with any client OS as long as I could use a decent terminal on it, so that I could SSH into FreeBSD servers where I spent a lot of time doing jobs which didn&amp;rsquo;t require graphical interface.</description>
    </item>
    
    <item>
      <title>Growing a ZFS Mirror Pool</title>
      <link>https://genneko.github.io/playing-with-bsd/storage/growing-a-zfs-mirror/</link>
      <pubDate>Sat, 10 Aug 2019 18:00:00 +0900</pubDate>
      
      <guid>https://genneko.github.io/playing-with-bsd/storage/growing-a-zfs-mirror/</guid>
      <description>I have a tiny home server for my family. It&amp;rsquo;s based on Atom N2800 CPU and runs FreeBSD 11.2 with a two-disk ZFS mirror.
Originally it had two 500GB disks, but now it has a 500GB and a 1TB ones because one of them was replaced due to a failure.
As the Handbook says, the available space of a mirror pool is limited by the size of the smallest disk. So my server can still get only 500GB from the total space of 1.</description>
    </item>
    
    <item>
      <title>Mounting ZFS Root failed when an external USB drive is connected</title>
      <link>https://genneko.github.io/playing-with-bsd/storage/mounting-from-zfs-failed/</link>
      <pubDate>Thu, 18 Jul 2019 19:08:00 +0900</pubDate>
      
      <guid>https://genneko.github.io/playing-with-bsd/storage/mounting-from-zfs-failed/</guid>
      <description>Last week, one of my FreeBSD 11.2 servers failed to boot with the following error after freebsd-update.
Mounting from zfs:zroot/ROOT/default failed with error 6; retrying for 3 more seconds It was the first time I encountered this type of error.
After struggling for some hours, I was able to boot the server by disconnecting an external USB harddrive, which I had prepared as a secondary backup storage. But since then, I had been wondering what the root cause was.</description>
    </item>
    
    <item>
      <title>Testing Joplin (Terminal and Desktop) and Web Clipper on FreeBSD</title>
      <link>https://genneko.github.io/playing-with-bsd/application/joplin-on-freebsd/</link>
      <pubDate>Fri, 21 Jun 2019 23:20:00 +0900</pubDate>
      
      <guid>https://genneko.github.io/playing-with-bsd/application/joplin-on-freebsd/</guid>
      <description>TL;DR (2020-01-15)
This article describes my initial exploration of Joplin in June 2019. It&amp;rsquo;s not intended to be a tutorial/howto and it&amp;rsquo;s not necessarily up to date.
Please refer to the newer post for more up-to-date and concise description on how to use Joplin on FreeBSD.
I&amp;rsquo;ve been using Evernote since April 2011.
Although there were times the app got disappointing updates or the service was unexpectedly interrupted (or more often expectedly interrupted by regular maintenance), it had been a great app/service and hopefully it is and it will be.</description>
    </item>
    
    <item>
      <title>WireGuard on FreeBSD Quick Look Part 2: Android Remote Access</title>
      <link>https://genneko.github.io/playing-with-bsd/networking/freebsd-wireguard-android/</link>
      <pubDate>Wed, 23 Jan 2019 01:22:00 +0900</pubDate>
      
      <guid>https://genneko.github.io/playing-with-bsd/networking/freebsd-wireguard-android/</guid>
      <description>After playing briefly with WireGuard (See previous post) on FreeBSD VNET Jails, today I performed a quick test between a FreeBSD host and an Android device over the Internet.
NOTE: WireGuard is still in early stage of development. Android app is clearly marked with beta and Go-implementation (wireguard-go) has no official release yet. This article just shows you what I did to take a look at it.
2020-04-26: I wrote a new post on building a WireGuard jail with the FreeBSD&amp;rsquo;s standard tools.</description>
    </item>
    
    <item>
      <title>WireGuard on FreeBSD Quick Look: Testing VPN in Jail Network</title>
      <link>https://genneko.github.io/playing-with-bsd/networking/freebsd-wireguard-quicklook/</link>
      <pubDate>Sun, 20 Jan 2019 15:47:34 +0900</pubDate>
      
      <guid>https://genneko.github.io/playing-with-bsd/networking/freebsd-wireguard-quicklook/</guid>
      <description>WireGuard is a new VPN application which focuses on simplicity thus security and speed. Although it was initially developed as a Linux kernel feature, now it has a userspace implementation in Go and binary packages are available for FreeBSD.
I used this weekend to have a quick look at it on FreeBSD 12.0.
This time I focused on site-to-site VPN setup. Maybe I will try remote-access VPN configuration in the near future.</description>
    </item>
    
    <item>
      <title>Using FreeBSD&#39;s Bootonly Installer Behind a Proxy</title>
      <link>https://genneko.github.io/playing-with-bsd/system/bootonly-install-behind-proxy/</link>
      <pubDate>Thu, 06 Dec 2018 21:58:00 +0900</pubDate>
      
      <guid>https://genneko.github.io/playing-with-bsd/system/bootonly-install-behind-proxy/</guid>
      <description>I&amp;rsquo;ve been so busy for the last month that I almost forgot about FreeBSD 12.0 which I had been looking forward to. Now it&amp;rsquo;s just around the corner!
Although it&amp;rsquo;s quite late, I tried to install 12.0-RC3 on a host behind a HTTP proxy and found that using a bootonly installer in this environment was a bit tricky. The following are the steps I took.
  Boot the host with a bootonly installer.</description>
    </item>
    
    <item>
      <title>Learning Spanning Tree Protocol with FreeBSD Bridges</title>
      <link>https://genneko.github.io/playing-with-bsd/networking/learning-stp/</link>
      <pubDate>Sun, 04 Nov 2018 21:19:01 +0900</pubDate>
      
      <guid>https://genneko.github.io/playing-with-bsd/networking/learning-stp/</guid>
      <description>Spanning Tree Protocol is a standard protocol for network bridges (layer-two switches) to autonomously find a logical loop-free topology and provide redundancy to the network.
Several variants have been developed since its birth, in which the most common standard is Rapid Spanning Tree Protocol (RSTP). Many managed switches implement the protocol and often enable it by default.
Although it&amp;rsquo;s quite common in the networking world where I&amp;rsquo;m living in its perimeter, it&amp;rsquo;s been something vague and unfamiliar to me for a long time.</description>
    </item>
    
    <item>
      <title>Learning Notes on FreeBSD Jails</title>
      <link>https://genneko.github.io/playing-with-bsd/system/learning-notes-on-jails/</link>
      <pubDate>Sun, 07 Oct 2018 18:35:49 +0900</pubDate>
      
      <guid>https://genneko.github.io/playing-with-bsd/system/learning-notes-on-jails/</guid>
      <description>I have heard about jails many times since my early days of FreeBSD life but it was only the last year I began to use it in production.
This article is a sort of personal notebook where I summarize what I learned about jails. It would be frequently updated as I learn more.
Assumptions  The host is running FreeBSD 11.2/amd64 on ZFS. Each jail has a separate root dataset under /vm on the host.</description>
    </item>
    
    <item>
      <title>Encrypted Temporary Storage with GELI</title>
      <link>https://genneko.github.io/playing-with-bsd/storage/encrypted-temporary-storage/</link>
      <pubDate>Fri, 07 Sep 2018 07:13:08 +0000</pubDate>
      
      <guid>https://genneko.github.io/playing-with-bsd/storage/encrypted-temporary-storage/</guid>
      <description>Recently, I wanted an encrypted working directory on a running FreeBSD system. The system was running on a plain (unencrypted) ZFS pool and there&amp;rsquo;s no plan to add disks to it. I needed the working directory only temporarily.
I came up with the following options.
 Use GELI on a ZFS volume (zvol). Use GELI on a memory disk (md). Use PEFS on a directory.  I excluded PEFS because I had very little experience.</description>
    </item>
    
    <item>
      <title>Connecting to the IPv6 Internet via tunnel (HE TunnelBroker)</title>
      <link>https://genneko.github.io/playing-with-bsd/networking/freebsd-tunnelv6-he/</link>
      <pubDate>Wed, 29 Aug 2018 15:18:01 +0900</pubDate>
      
      <guid>https://genneko.github.io/playing-with-bsd/networking/freebsd-tunnelv6-he/</guid>
      <description>I had been playing with IPv6 on various systems in early 2000s. They were mostly NetBSD (1.x) and FreeBSD (4.x) plus Windows XP. My home network had been connected to the IPv6 Internet with a router running NetBSD/hpcmips which was installed on a Windows CE handheld PC.
After a decade and a half, I decided to reconnect my home network to the IPv6 Internet.
Unfortunately, native IPv6 service is still unavailable for me.</description>
    </item>
    
    <item>
      <title>Migrating a live system from GEOM mirror to ZFS mirror</title>
      <link>https://genneko.github.io/playing-with-bsd/storage/gmirror-to-zfs/</link>
      <pubDate>Tue, 17 Apr 2018 15:27:13 +0900</pubDate>
      
      <guid>https://genneko.github.io/playing-with-bsd/storage/gmirror-to-zfs/</guid>
      <description>I had been wanting to migrate a FreeBSD system on a GEOM mirror (gmirror) to a ZFS mirror.
After several rehearsals on a VM, I have finally achieved that goal with the following steps.
  Load ZFS-releated kernel modules and set a tunable to use 4K sector drives.
sudo kldload zfs sudo sysctl vfs.zfs.min_auto_ashift=12   Remove one (da0) of the two disks (da0, da1) which make up the gmirror (gm0).</description>
    </item>
    
    <item>
      <title>Route-based VPN with FreeBSD-11.1&#39;s IPsec VTI</title>
      <link>https://genneko.github.io/playing-with-bsd/networking/freebsd-vti-ipsec/</link>
      <pubDate>Thu, 22 Jun 2017 15:09:50 +0900</pubDate>
      
      <guid>https://genneko.github.io/playing-with-bsd/networking/freebsd-vti-ipsec/</guid>
      <description>I have managed to setup route-based IPsec VPN with FreeBSD-11.1 RC3, which had introduced ipsec virtual tunnel interface if_ipsec(4). Here is a record of my experiment just for your information.
Prerequisite  FreeBSD-11.1-RC3/amd64 Generic kernel No special packages/ports (just added sudo and a few other must-have utilities)  Network configuration NOTE: The following text shows bsd1 configurations only.
 10.0.0.1 10.0.0.2 192.168.10.0/24 --- [bsd1] ----- /// ----- [bsd2] --- 192.168.20.0/24 172.</description>
    </item>
    
  </channel>
</rss>
