<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>genneko</title>
    <link>https://genneko.github.io/</link>
    <description>Recent content on genneko</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; Copyright 2018 - 2019 genneko</copyright>
    <lastBuildDate>Wed, 23 Jan 2019 01:22:00 +0900</lastBuildDate>
    
	<atom:link href="https://genneko.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WireGuard on FreeBSD Quick Look Part 2: Android Remote Access</title>
      <link>https://genneko.github.io/playing-with-bsd/networking/freebsd-wireguard-android/</link>
      <pubDate>Wed, 23 Jan 2019 01:22:00 +0900</pubDate>
      
      <guid>https://genneko.github.io/playing-with-bsd/networking/freebsd-wireguard-android/</guid>
      <description>After playing briefly with WireGuard (See previous post) on FreeBSD VNET Jails, today I performed a quick test between a FreeBSD host and an Android device over the Internet.
NOTE: WireGuard is still in early stage of development. Android app is clearly marked with beta and Go-implementation (wireguard-go) has no official release yet. This article just shows you what I did to take a look at it.
Network Configuration  FreeBSD - WireGuard Server.</description>
    </item>
    
    <item>
      <title>WireGuard on FreeBSD Quick Look: Testing VPN in Jail Network</title>
      <link>https://genneko.github.io/playing-with-bsd/networking/freebsd-wireguard-quicklook/</link>
      <pubDate>Sun, 20 Jan 2019 15:47:34 +0900</pubDate>
      
      <guid>https://genneko.github.io/playing-with-bsd/networking/freebsd-wireguard-quicklook/</guid>
      <description>WireGuard is a new VPN application which focuses on simplicity thus security and speed. Although it was initially developed as a Linux kernel feature, now it has a userspace implementation in Go and binary packages are available for FreeBSD.
I used this weekend to have a quick look at it on FreeBSD 12.0.
This time I focused on site-to-site VPN setup. Maybe I will try remote-access VPN configuration in the near future.</description>
    </item>
    
    <item>
      <title>Using FreeBSD&#39;s Bootonly Installer Behind a Proxy</title>
      <link>https://genneko.github.io/playing-with-bsd/system/bootonly-install-behind-proxy/</link>
      <pubDate>Thu, 06 Dec 2018 21:58:00 +0900</pubDate>
      
      <guid>https://genneko.github.io/playing-with-bsd/system/bootonly-install-behind-proxy/</guid>
      <description>I&amp;rsquo;ve been so busy for the last month that I almost forgot about FreeBSD 12.0 which I had been looking forward to. Now it&amp;rsquo;s just around the corner!
Although it&amp;rsquo;s quite late, I tried to install 12.0-RC3 on a host behind a HTTP proxy and found that using a bootonly installer in this environment was a bit tricky. The following are the steps I took.
 Boot the host with a bootonly installer.</description>
    </item>
    
    <item>
      <title>Learning Spanning Tree Protocol with FreeBSD Bridges</title>
      <link>https://genneko.github.io/playing-with-bsd/networking/learning-stp/</link>
      <pubDate>Sun, 04 Nov 2018 21:19:01 +0900</pubDate>
      
      <guid>https://genneko.github.io/playing-with-bsd/networking/learning-stp/</guid>
      <description>Spanning Tree Protocol is a standard protocol for network bridges (layer-two switches) to autonomously find a logical loop-free topology and provide redundancy to the network.
Several variants have been developed since its birth, in which the most common standard is Rapid Spanning Tree Protocol (RSTP). Many managed switches implement the protocol and often enable it by default.
Although it&amp;rsquo;s quite common in the networking world where I&amp;rsquo;m living in its perimeter, it&amp;rsquo;s been something vague and unfamiliar to me for a long time.</description>
    </item>
    
    <item>
      <title>Learning Notes on FreeBSD Jails</title>
      <link>https://genneko.github.io/playing-with-bsd/system/learning-notes-on-jails/</link>
      <pubDate>Sun, 07 Oct 2018 18:35:49 +0900</pubDate>
      
      <guid>https://genneko.github.io/playing-with-bsd/system/learning-notes-on-jails/</guid>
      <description>I have heard about jails many times since my early days of FreeBSD life but it was only the last year I began to use it in production.
This article is a sort of personal notebook where I summarize what I learned about jails. It would be frequently updated as I learn more.
Assumptions  The host is running FreeBSD 11.2/amd64 on ZFS. Each jail has a separate root dataset under /vm on the host.</description>
    </item>
    
    <item>
      <title>Encrypted Temporary Storage with GELI</title>
      <link>https://genneko.github.io/playing-with-bsd/storage/encrypted-temporary-storage/</link>
      <pubDate>Fri, 07 Sep 2018 07:13:08 +0000</pubDate>
      
      <guid>https://genneko.github.io/playing-with-bsd/storage/encrypted-temporary-storage/</guid>
      <description>Recently, I wanted an encrypted working directory on a running FreeBSD system. The system was running on a plain (unencrypted) ZFS pool and there&amp;rsquo;s no plan to add disks to it. I needed the working directory only temporarily.
I came up with the following options.
 Use GELI on a ZFS volume (zvol). Use GELI on a memory disk (md). Use PEFS on a directory.  I excluded PEFS because I had very little experience.</description>
    </item>
    
    <item>
      <title>Connecting to the IPv6 Internet via tunnel (HE TunnelBroker)</title>
      <link>https://genneko.github.io/playing-with-bsd/networking/freebsd-tunnelv6-he/</link>
      <pubDate>Wed, 29 Aug 2018 15:18:01 +0900</pubDate>
      
      <guid>https://genneko.github.io/playing-with-bsd/networking/freebsd-tunnelv6-he/</guid>
      <description>I had been playing with IPv6 on various systems in early 2000s. They were mostly NetBSD (1.x) and FreeBSD (4.x) plus Windows XP. My home network had been connected to the IPv6 Internet with a router running NetBSD/hpcmips which was installed on a Windows CE handheld PC.
After a decade and a half, I decided to reconnect my home network to the IPv6 Internet.
Unfortunately, native IPv6 service is still unavailable for me.</description>
    </item>
    
    <item>
      <title>Migrating a live system from GEOM mirror to ZFS mirror</title>
      <link>https://genneko.github.io/playing-with-bsd/storage/gmirror-to-zfs/</link>
      <pubDate>Tue, 17 Apr 2018 15:27:13 +0900</pubDate>
      
      <guid>https://genneko.github.io/playing-with-bsd/storage/gmirror-to-zfs/</guid>
      <description>I had been wanting to migrate a FreeBSD system on a GEOM mirror (gmirror) to a ZFS mirror.
After several rehearsals on a VM, I have finally achieved that goal with the following steps.
 Load ZFS-releated kernel modules and set a tunable to use 4K sector drives.
sudo kldload zfs sudo sysctl vfs.zfs.min_auto_ashift=12  Remove one (da0) of the two disks (da0, da1) which make up the gmirror (gm0).</description>
    </item>
    
    <item>
      <title>Route-based VPN with FreeBSD-11.1&#39;s IPsec VTI</title>
      <link>https://genneko.github.io/playing-with-bsd/networking/freebsd-vti-ipsec/</link>
      <pubDate>Thu, 22 Jun 2017 15:09:50 +0900</pubDate>
      
      <guid>https://genneko.github.io/playing-with-bsd/networking/freebsd-vti-ipsec/</guid>
      <description>I have managed to setup route-based IPsec VPN with FreeBSD-11.1 RC3, which had introduced ipsec virtual tunnel interface if_ipsec(4). Here is a record of my experiment just for your information.
Prerequisite  FreeBSD-11.1-RC3/amd64 Generic kernel No special packages/ports (just added sudo and a few other must-have utilities)  Network configuration NOTE: The following text shows bsd1 configurations only.
 10.0.0.1 10.0.0.2 192.168.10.0/24 --- [bsd1] ----- /// ----- [bsd2] --- 192.</description>
    </item>
    
  </channel>
</rss>